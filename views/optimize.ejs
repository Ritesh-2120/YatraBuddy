<% layout("/layouts/boilerplate.ejs") %>

<div class="container mt-5">
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3>Route Optimization</h3>
                </div>
                <div class="card-body">
                    <form id="optimizeForm">
                        <div class="mb-3">
                            <label class="form-label">Select Starting Point</label>
                            <select class="form-select mb-3" id="startingPoint">
                                <option value="">Select a starting point...</option>
                                <% if (listings && listings.length > 0) { %>
                                    <% listings.forEach(listing => { %>
                                        <option value="<%= listing.coordinates.latitude %>,<%= listing.coordinates.longitude %>"
                                                data-title="<%= listing.title %>">
                                            <%= listing.title %> (<%= listing.location %>)
                                        </option>
                                    <% }); %>
                                <% } %>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Select Additional Points</label>
                            <div id="listingsContainer" class="border p-3 rounded" style="max-height: 200px; overflow-y: auto;">
                                <% if (listings && listings.length > 0) { %>
                                    <% listings.forEach(listing => { %>
                                        <div class="form-check mb-2">
                                            <input class="form-check-input listing-checkbox" type="checkbox" 
                                                   value="<%= listing.coordinates.latitude %>,<%= listing.coordinates.longitude %>"
                                                   data-title="<%= listing.title %>"
                                                   id="listing<%= listing._id %>">
                                            <label class="form-check-label" for="listing<%= listing._id %>">
                                                <%= listing.title %> (<%= listing.location %>)
                                            </label>
                                        </div>
                                    <% }); %>
                                <% } else { %>
                                    <p class="text-muted">No listings available</p>
                                <% } %>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label for="points" class="form-label">Or Enter Custom Points (one per line, format: latitude,longitude)</label>
                            <textarea class="form-control" id="points" rows="5" placeholder="28.6139,77.2090&#10;19.0760,72.8777&#10;12.9716,77.5946"></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary">Optimize Route</button>
                    </form>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h3>Optimized Route</h3>
                </div>
                <div class="card-body">
                    <div id="map" style="height: 400px;"></div>
                    <div id="routeInfo" class="mt-3"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

<script>
    // Initialize map
    const map = L.map('map').setView([20.5937, 78.9629], 5);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: 'Â© OpenStreetMap contributors'
    }).addTo(map);

    let markers = [];
    let routeLine;

    // Function to get points from checkboxes
    function getPointsFromCheckboxes() {
        const checkboxes = document.querySelectorAll('.listing-checkbox:checked');
        return Array.from(checkboxes).map(checkbox => {
            const [lat, lng] = checkbox.value.split(',').map(Number);
            return [lat, lng];
        });
    }

    // Function to validate coordinates
    function isValidCoordinate(lat, lng) {
        return !isNaN(lat) && !isNaN(lng) && 
               lat >= -90 && lat <= 90 && 
               lng >= -180 && lng <= 180;
    }

    document.getElementById('optimizeForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Clear previous markers and route
        markers.forEach(marker => map.removeLayer(marker));
        markers = [];
        if (routeLine) {
            map.removeLayer(routeLine);
        }

        // Get starting point
        const startingPointSelect = document.getElementById('startingPoint');
        const startingPointValue = startingPointSelect.value;
        if (!startingPointValue) {
            alert('Please select a starting point');
            return;
        }
        const [startLat, startLng] = startingPointValue.split(',').map(Number);
        const startingPoint = [startLat, startLng];

        // Get points from both checkboxes and textarea
        const checkboxPoints = getPointsFromCheckboxes();
        const textPoints = document.getElementById('points').value
            .split('\n')
            .filter(line => line.trim())
            .map(line => {
                const [lat, lng] = line.split(',').map(Number);
                if (!isValidCoordinate(lat, lng)) {
                    throw new Error(`Invalid coordinates: ${line}`);
                }
                return [lat, lng];
            });

        // Combine all points, ensuring starting point is first
        const points = [startingPoint, ...checkboxPoints, ...textPoints];
        console.log('Points to optimize:', points); // Debug log

        if (points.length < 2) {
            alert('Please select at least one additional point or enter coordinates');
            return;
        }

        try {
            const response = await fetch('/optimize', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ points, startingPoint })
            });

            const data = await response.json();
            console.log('Optimization response:', data); // Debug log
            
            if (data.success) {
                // Add markers for each point
                data.optimizedRoute.forEach((point, index) => {
                    const marker = L.marker(point)
                        .bindPopup(`Point ${index + 1}: ${point[0].toFixed(4)}, ${point[1].toFixed(4)}`)
                        .addTo(map);
                    markers.push(marker);
                });

                // Draw route line
                routeLine = L.polyline(data.optimizedRoute, {
                    color: 'blue',
                    weight: 3,
                    opacity: 0.7
                }).addTo(map);

                // Fit map to show all points
                map.fitBounds(routeLine.getBounds());

                // Update route info
                document.getElementById('routeInfo').innerHTML = `
                    <div class="alert alert-success">
                        <h5>Optimized Route Details:</h5>
                        <p>Starting Point: ${startingPointSelect.options[startingPointSelect.selectedIndex].text}</p>
                        <p>Total Points: ${data.totalPoints}</p>
                        <p>Route has been optimized for minimum distance!</p>
                    </div>
                `;
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('Error:', error); // Debug log
            document.getElementById('routeInfo').innerHTML = `
                <div class="alert alert-danger">
                    Error: ${error.message}
                </div>
            `;
        }
    });
</script>